// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ldapmanager

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LDAPManagerClient is the client API for LDAPManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LDAPManagerClient interface {
	// Authentication
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Accounts
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*UserList, error)
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*User, error)
	NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	// Groups
	NewGroup(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	RenameGroup(ctx context.Context, in *RenameGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GroupList, error)
	GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GroupList, error)
	// Group members
	IsGroupMember(ctx context.Context, in *IsGroupMemberRequest, opts ...grpc.CallOption) (*GroupMemberStatus, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	AddGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
}

type lDAPManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewLDAPManagerClient(cc grpc.ClientConnInterface) LDAPManagerClient {
	return &lDAPManagerClient{cc}
}

func (c *lDAPManagerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) NewGroup(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/NewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) RenameGroup(ctx context.Context, in *RenameGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/RenameGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) IsGroupMember(ctx context.Context, in *IsGroupMemberRequest, opts ...grpc.CallOption) (*GroupMemberStatus, error) {
	out := new(GroupMemberStatus)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/IsGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) AddGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/AddGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPManagerClient) DeleteGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ldapmanager.LDAPManager/DeleteGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LDAPManagerServer is the server API for LDAPManager service.
// All implementations must embed UnimplementedLDAPManagerServer
// for forward compatibility
type LDAPManagerServer interface {
	// Authentication
	Login(context.Context, *LoginRequest) (*Token, error)
	Logout(context.Context, *Empty) (*Empty, error)
	// Accounts
	GetUserList(context.Context, *GetUserListRequest) (*UserList, error)
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*Empty, error)
	GetAccount(context.Context, *GetAccountRequest) (*User, error)
	NewAccount(context.Context, *NewAccountRequest) (*Empty, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*Empty, error)
	// Groups
	NewGroup(context.Context, *NewGroupRequest) (*Empty, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*Empty, error)
	RenameGroup(context.Context, *RenameGroupRequest) (*Empty, error)
	GetGroupList(context.Context, *GetGroupListRequest) (*GroupList, error)
	GetUserGroups(context.Context, *GetUserGroupsRequest) (*GroupList, error)
	// Group members
	IsGroupMember(context.Context, *IsGroupMemberRequest) (*GroupMemberStatus, error)
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	AddGroupMember(context.Context, *GroupMember) (*Empty, error)
	DeleteGroupMember(context.Context, *GroupMember) (*Empty, error)
	mustEmbedUnimplementedLDAPManagerServer()
}

// UnimplementedLDAPManagerServer must be embedded to have forward compatible implementations.
type UnimplementedLDAPManagerServer struct {
}

func (*UnimplementedLDAPManagerServer) Login(context.Context, *LoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedLDAPManagerServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedLDAPManagerServer) GetUserList(context.Context, *GetUserListRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (*UnimplementedLDAPManagerServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (*UnimplementedLDAPManagerServer) GetAccount(context.Context, *GetAccountRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedLDAPManagerServer) NewAccount(context.Context, *NewAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedLDAPManagerServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedLDAPManagerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedLDAPManagerServer) NewGroup(context.Context, *NewGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGroup not implemented")
}
func (*UnimplementedLDAPManagerServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedLDAPManagerServer) RenameGroup(context.Context, *RenameGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameGroup not implemented")
}
func (*UnimplementedLDAPManagerServer) GetGroupList(context.Context, *GetGroupListRequest) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (*UnimplementedLDAPManagerServer) GetUserGroups(context.Context, *GetUserGroupsRequest) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedLDAPManagerServer) IsGroupMember(context.Context, *IsGroupMemberRequest) (*GroupMemberStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGroupMember not implemented")
}
func (*UnimplementedLDAPManagerServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedLDAPManagerServer) AddGroupMember(context.Context, *GroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupMember not implemented")
}
func (*UnimplementedLDAPManagerServer) DeleteGroupMember(context.Context, *GroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupMember not implemented")
}
func (*UnimplementedLDAPManagerServer) mustEmbedUnimplementedLDAPManagerServer() {}

func RegisterLDAPManagerServer(s *grpc.Server, srv LDAPManagerServer) {
	s.RegisterService(&_LDAPManager_serviceDesc, srv)
}

func _LDAPManager_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).NewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_NewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).NewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/NewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).NewGroup(ctx, req.(*NewGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_RenameGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).RenameGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/RenameGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).RenameGroup(ctx, req.(*RenameGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).GetGroupList(ctx, req.(*GetGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).GetUserGroups(ctx, req.(*GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_IsGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).IsGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/IsGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).IsGroupMember(ctx, req.(*IsGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_AddGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).AddGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/AddGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).AddGroupMember(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAPManager_DeleteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPManagerServer).DeleteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapmanager.LDAPManager/DeleteGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPManagerServer).DeleteGroupMember(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _LDAPManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ldapmanager.LDAPManager",
	HandlerType: (*LDAPManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LDAPManager_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _LDAPManager_Logout_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _LDAPManager_GetUserList_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _LDAPManager_AuthenticateUser_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _LDAPManager_GetAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _LDAPManager_NewAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _LDAPManager_DeleteAccount_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _LDAPManager_ChangePassword_Handler,
		},
		{
			MethodName: "NewGroup",
			Handler:    _LDAPManager_NewGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _LDAPManager_DeleteGroup_Handler,
		},
		{
			MethodName: "RenameGroup",
			Handler:    _LDAPManager_RenameGroup_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _LDAPManager_GetGroupList_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _LDAPManager_GetUserGroups_Handler,
		},
		{
			MethodName: "IsGroupMember",
			Handler:    _LDAPManager_IsGroupMember_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _LDAPManager_GetGroup_Handler,
		},
		{
			MethodName: "AddGroupMember",
			Handler:    _LDAPManager_AddGroupMember_Handler,
		},
		{
			MethodName: "DeleteGroupMember",
			Handler:    _LDAPManager_DeleteGroupMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ldap_manager.proto",
}
