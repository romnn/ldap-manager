on: [push, pull_request]

name: test
jobs:
  ldapmanager-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10' 
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'

      - name: Install code check tools
        run: |
          pip install pre-commit
          go install golang.org/x/tools/cmd/goimports@latest
          go install golang.org/x/lint/golint@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Code checks
        run: pre-commit run --all-files

  web-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10' 
      - uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Build dependencies
        run: |
          cd web
          yarn install --dev
          yarn build

      - name: Run type checks
        run: |
          cd web/
          yarn run type-check

      - name: Run lint
        run: |
          cd web/
          yarn run lint

  helm-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint helm chart
        run: helm lint deployment/helm/charts/ldapmanager/

  ldapmanger-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - '1.19.x'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10' 
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install prerequisites
        run: |
          go install github.com/kyoh86/richgo@latest

      - name: Build
        run: go build -race ./...

      - name: Test
        env:
          RICHGO_FORCE_COLOR: "1"
        run: >
          richgo test
          -race
          -parallel 1
          -failfast
          -coverpkg=all
          -coverprofile=coverage.txt
          -covermode=atomic
          ./...

      - uses: codecov/codecov-action@v1
        if: ${{ matrix.go-version == '1.19.x' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}>
