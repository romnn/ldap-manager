syntax = "proto3";
package ldapmanager;

import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";

extend google.protobuf.MethodOptions { bool require_admin = 51234; }

message Empty {}

enum SortOrder {
  ASCENDING = 0;
  DESCENDING = 1;
}

message GetUserListRequest {
  int32 start = 1;
  int32 end = 2;
  SortOrder sort_order = 3;
  string sort_key = 4;

  repeated string filter = 10;
}

message UserData { map<string, string> data = 1; }

message UserList {
  repeated UserData users = 1;
  int64 total = 10;
}

message AuthenticateUserRequest {
  string username = 1;
  string password = 2;
}

message GetUserRequest { string username = 1; }

enum HashingAlgorithm {
  DEFAULT = 0;
  SHA512CRYPT = 1;
  SHA256CRYPT = 2;
  BLOWFISH = 3;
  EXTDES = 4;
  MD5CRYPT = 5;
  SMD5 = 6;
  MD5 = 7;
  SHA = 8;
  SSHA = 9;
  CRYPT = 10;
  CLEAR = 11;
}

message Account {
  string first_name = 1;
  string last_name = 2;

  int32 uid = 10;
  int32 gid = 11;
  string login_shell = 12;
  string home_directory = 13;

  string username = 20;
  string email = 21;
  string password = 22;
}

message NewUserRequest { Account account = 1; }

message UpdateUserRequest {
  string username = 1;
  Account update = 10;
}

message DeleteUserRequest { string username = 1; }

message NewGroupRequest {
  string name = 1;
  repeated string members = 2;
}

message DeleteGroupRequest { string name = 1; }

message UpdateGroupRequest {
  string name = 1;
  string new_name = 2;
  int32 gid = 3;
}

message GetGroupListRequest {
  int32 start = 1;
  int32 end = 2;
  SortOrder sort_order = 3;
  string sort_key = 4;
  repeated string filter = 10;
}

message GroupList {
  repeated string groups = 1;
  int64 total = 10;
}

message IsGroupMemberRequest {
  string username = 1;
  string group = 2;
}

message GroupMemberStatus { bool is_member = 1; }

message GetGroupRequest {
  int32 start = 1;
  int32 end = 2;
  SortOrder sort_order = 3;
  string sort_key = 4;
  string name = 10;
}

message GetUserGroupsRequest { string username = 1; }

message Group {
  string name = 1;
  repeated string members = 2;
  int32 gid = 3;
  int64 total = 10;
}

message GroupMember {
  string group = 1;
  string username = 2;
}

message ChangePasswordRequest {
  string username = 1;
  string password = 2;
  HashingAlgorithm hashing_algorithm = 100;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message Token {
  string token = 1;
  string username = 2;
  string display_name = 3;
  bool is_admin = 4;
  int64 expiration = 10;
}

service LDAPManager {
  // Authentication
  rpc Login(LoginRequest) returns (Token) {
    option (google.api.http) = {
      post : "/v1/login"
      body : "*"
    };
  }

  // Users
  rpc GetUserList(GetUserListRequest) returns (UserList) {
    option (require_admin) = true;
    option (google.api.http) = {
      get : "/v1/users"
    };
  }
  rpc GetUser(GetUserRequest) returns (UserData) {
    option (google.api.http) = {
      get : "/v1/user/{username}"
    };
  }
  rpc NewUser(NewUserRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put : "/v1/user"
      body : "*"
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (Token) {
    option (google.api.http) = {
      post : "/v1/user/{username}/update"
      body : "*"
    };
  }
  rpc DeleteUser(DeleteUserRequest) returns (Empty) {
    option (google.api.http) = {
      delete : "/v1/user/{username}"
    };
  }
  rpc ChangePassword(ChangePasswordRequest) returns (Empty) {
    option (google.api.http) = {
      post : "/v1/user/password"
      body : "*"
    };
  }

  // Groups
  rpc NewGroup(NewGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put : "/v1/group"
      body : "*"
    };
  }
  rpc DeleteGroup(DeleteGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      delete : "/v1/group/{name}"
    };
  }
  rpc UpdateGroup(UpdateGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      post : "/v1/group/{name}/update"
      body : "*"
    };
  }
  rpc GetGroupList(GetGroupListRequest) returns (GroupList) {
    // option (require_admin) = true;
    option (google.api.http) = {
      get : "/v1/groups"
    };
  }

  rpc GetUserGroups(GetUserGroupsRequest) returns (GroupList) {
    option (google.api.http) = {
      get : "/v1/user/{username}/groups"
    };
  }

  // Group members
  rpc IsGroupMember(IsGroupMemberRequest) returns (GroupMemberStatus) {
    option (require_admin) = true;
  }

  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (require_admin) = true;
    option (google.api.http) = {
      get : "/v1/group/{name}"
    };
  }
  rpc AddGroupMember(GroupMember) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put : "/v1/group/{group}/members"
      body : "*"
    };
  }
  rpc DeleteGroupMember(GroupMember) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      delete : "/v1/group/{group}/member/{username}"
    };
  }
}
