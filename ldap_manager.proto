syntax = "proto3";
package ldapmanager;
option go_package = "github.com/romnnn/ldap-manager/grpc/ldap-manager;ldapmanager";

import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";

extend google.protobuf.MethodOptions {
  bool require_admin = 51234;
  bool require_auth = 51235;
}

message Empty {}

enum SortOrder {
  ASCENDING = 0;
  DESCENDING = 1;
}

message GetUserListRequest {
  int32 start = 1;
	int32 end = 2;
	SortOrder sort_order = 3;
  string sort_key = 4;
  
  repeated string filter = 10;
	// repeated string fields = 11;
}

message User {
  map<string, string> data = 1;
}

message UserList {
  repeated User users = 1;
  int64 total = 10;
}

message AuthenticateUserRequest {
  string username = 1;
  string password = 2;
}

message GetAccountRequest {
  string username = 1;
  // repeated string fields = 10;
}

enum HashingAlgorithm {
  DEFAULT = 0;
	SHA512CRYPT = 1;
	SHA256CRYPT = 2;
	BLOWFISH = 3;
	EXTDES = 4;
	MD5CRYPT = 5;
	SMD5 = 6;
	MD5 = 7;
	SHA = 8;
	SSHA = 9;
	CRYPT = 10;
	CLEAR = 11;
}

message NewAccountRequest {
  string first_name = 1;
  string last_name = 2;
  
  int32 uid = 10;
  int32 gid = 11;
  string login_shell = 12;
  string home_directory = 13;

  string username = 20;
  string email = 21;
	string password = 22;
  // exclude hashing_algorithm because we will use this interface publicly
  // HashingAlgorithm hashing_algorithm = 100;
}

message DeleteAccountRequest {
  string username = 1;
}

message NewGroupRequest {
  string name = 1;
	repeated string members = 2;
}

message DeleteGroupRequest {
  string name = 1;
}

message RenameGroupRequest {
  string name = 1;
  string new_name = 2;
}

message GetGroupListRequest {
  int32 start = 1;
	int32 end = 2;
	SortOrder sort_order = 3;
  string sort_key = 4;
	repeated string filter = 10;
}

message GroupList {
  repeated string groups = 1;
  int64 total = 10;
}

message IsGroupMemberRequest {
  string username = 1;
  string group = 2;
}

message GroupMemberStatus {
  bool is_member = 1;
}

message GetGroupRequest {
  int32 start = 1;
	int32 end = 2;
	SortOrder sort_order = 3;
  string sort_key = 4;
  string name = 10;
}

message GetUserGroupsRequest {
  string username = 1;
}

message Group {
  string name = 1;
  repeated string members = 2;
  int64 total = 10;
}

message GroupMember {
  string group = 1;
  string username = 2;
}

message ChangePasswordRequest {
  string username = 1;
	string password = 2;
	HashingAlgorithm hashing_algorithm = 100;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message Token {
  string token = 1;
}

service LDAPManager {
  // Authentication
  rpc Login(LoginRequest) returns (Token) {
    option (google.api.http) = {
      post: "/v1/login"
      body: "*"
    };
  }
  rpc Logout(Empty) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/logout"
      body: "*"
    };
  }

  // Accounts
  rpc GetUserList(GetUserListRequest) returns (UserList) {
    option (require_admin) = true;
    option (google.api.http) = {
      get: "/v1/accounts"
    };
  }
  rpc AuthenticateUser(AuthenticateUserRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      post: "/v1/example/echo"
      body: "*"
    };
  }
  rpc GetAccount(GetAccountRequest) returns (User) {
    option (require_admin) = true;
    option (google.api.http) = {
      get: "/v1/account/{username}"
    };
  }
  rpc NewAccount(NewAccountRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put: "/v1/account"
      body: "*"
    };
  }
  rpc DeleteAccount(DeleteAccountRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      delete: "/v1/account/{username}"
    };
  }
  rpc ChangePassword(ChangePasswordRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      post: "/v1/account/password"
      body: "*"
    };
  }

  // Groups
  rpc NewGroup(NewGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put: "/v1/group"
      body: "*"
    };
  }
  rpc DeleteGroup(DeleteGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      delete: "/v1/group/{name}"
    };
  }
  rpc RenameGroup(RenameGroupRequest) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      post: "/v1/group/rename"
      body: "*"
    };
  }
  rpc GetGroupList(GetGroupListRequest) returns (GroupList) {
    option (require_admin) = true;
    option (google.api.http) = {
      get: "/v1/groups"
    };
  }

  rpc GetUserGroups(GetUserGroupsRequest) returns (GroupList) {
    option (google.api.http) = {
      get: "/v1/account/{username}/groups"
    };
  }

  // Group members
  rpc IsGroupMember(IsGroupMemberRequest) returns (GroupMemberStatus) {
    option (require_admin) = true;
    /*
    option (google.api.http) = {
      post: "/v1/example/echo"
      body: "*"
    };
    */
  }
  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (require_admin) = true;
    option (google.api.http) = {
      get: "/v1/group/{name}"
    };
  }
  rpc AddGroupMember(GroupMember) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      put: "/v1/group/{group}/members"
      body: "*"
    };
  }
  rpc DeleteGroupMember(GroupMember) returns (Empty) {
    option (require_admin) = true;
    option (google.api.http) = {
      delete: "/v1/group/{group}/member/{username}"
    };
  }
}